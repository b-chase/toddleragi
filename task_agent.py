import openai
import json
from ai_responses import get_ada_embedding, openai_call
from colorama import Fore


class TaskAgent:
    def __init__(self, objective, task_name=None, task_type=None, 
                 model='gpt-3.5-turbo', model_temp=0.3, 
                 context=None, feedback=None, result=None, debug=False):
        self.objective = objective
        self.task_name = task_name
        self.task_type = task_type
        self.model = model
        self.model_temp = model_temp
        self.context = context
        self.feedback = feedback
        self.result = result
        self.debug = debug
    

    def complete_task(self):
        """
        Runs agents to complete the current task

        Returns:
            str: The text obtained from completing the task
        """

        manager_comment = ''
        # try 5 times to complete the task
        for i in range(5):
            task_execution = self.execute_task()
            manager_feedback = self.get_feedback(json.dumps(task_execution))
            task_status = manager_feedback['task_status']
            manager_comment = manager_feedback['task_feedback']

            if task_status == 'COMPLETE' and self.result is not None:
                print(Fore.GREEN + f'COMPLETED: {self.task_name}\n>> Manager feedback: {manager_comment}'+Fore.RESET)
                break
            elif task_status == 'IMPOSSIBLE':
                print(Fore.RED + f'IMPOSSIBLE: {self.task_name}\n>> Manager feedback: {manager_comment}'+Fore.RESET)
                self.result = f'Task skipped. {manager_comment}'
                break
            else:
                print(Fore.YELLOW + f'{task_status}: {self.task_name}\n>> Manager feedback: {manager_comment}'+Fore.RESET)
                print(Fore.LIGHTWHITE_EX + f"Rejected work:\n{json.dumps(task_execution)}" + Fore.RESET)
        
        return task_status


    def execute_task(self) -> dict:
        """
        Executes a task as part of a larger objective, taking into account context and feedback received

        Returns:
            dict: The response generated by the AI for the given task.
        """
        
        prompt = '''You are a task-executing AI and have received this message from your manager:
        {''' + f'''
            "task": "{self.task_name}", 
            "project objective": "{self.objective}",
            "completed tasks": "{self.context}",
            "manager feedback": "{self.feedback}"
        '''+'''}
        Complete the task and respond with your finished work product. Don't include anything else in your response.
        Response:
        '''

        if self.debug:
            print(f'EXECUTION AGENT PROMPT:\n{prompt}')
        response = openai_call(prompt, model=self.model, temperature=self.model_temp, max_tokens=1800).strip()

        self.result = response
        
        return {"result": response}


    def get_feedback(self, agent_output):
        """
        Sends agent task execution result to a "manager" and offers feedback

        Returns:
            dict: The response generated by the AI.
        """
        
        prompt = f"""You are a management AI who manages task-executing AI agents with the ultimate objective: {self.objective}
        Your subordinate just submitted their work for the task: {self.task_name}
        """ + (f'Here are some already-completed tasks: {self.context}\n' if self.context else '') + f"""
        Agent's output:'''
        {agent_output}'''
        Determine if the 'result' is sufficient to mark the task as completed.
        Respond with a JSON object in the following format:"""+"""'''
        {
            "task_feedback": "<Feedback on agent's attempt to complete the task>",
            "task_status": "<COMPLETE|INCOMPLETE|IMPOSSIBLE>"
        }'''
        Do not include anything but the JSON object in your response.
        Response:"""

        if self.debug:
            print(f"Manager's feedback:\n{prompt}")
        
        response = openai_call(prompt, model=self.model, temperature=self.model_temp, max_tokens=300)
        try:
            manager_response = json.loads(response)
        except json.decoder.JSONDecodeError as e:
            print(f'Failure to load JSON from:\n{response}')
            raise e
        
        self.feedback = manager_response['task_feedback']
        
        return manager_response
    


